# ===========================================================================================
# Peer Handler
# ===========================================================================================
# Purpose: Manages peer information in the network. This handler validates and stores
#          peer data (public keys and names) and maintains the peer database.
#
# Key Functions:
# - Validates peer events have required public key
# - Stores peer information with metadata
# - Resolves "unknown peer" status for messages
# ===========================================================================================

# Common anchors for reused data
anchors:
  # Common empty states
  emptyPeers: &emptyPeers []
  emptyState: &emptyState {}

type: peer

# ===========================================================================================
# PROJECTOR - HANDLES INCOMING PEER EVENTS
# ===========================================================================================
projector:
  description: Validates peer has public key and adds to projection
  func: projector.project
  
  # =======================================================================================
  # TEST SCENARIOS
  # =======================================================================================
  tests:
    # -------------------------------------------------------------------------------------
    # Test: Valid Peer Registration
    # -------------------------------------------------------------------------------------
    - given:
        db:
          state:
            identities:
              - pubkey: test_identity
                privkey: test_privkey
                name: Test Identity
        envelope:
          data:
            type: peer
            pubkey: peer123      # Required field
            name: Alice          # Optional display name
          metadata:
            received_by: test_identity  # Which identity received this
      then:
        db:
          state:
            peers:
              - pubkey: peer123
                name: Alice
                joined_via: direct    # How they joined the network
                added_at: "*"        # Timestamp (wildcard in test)
                received_by: test_identity
          eventStore:
            - type: peer
              pubkey: peer123
              name: Alice
              
    # -------------------------------------------------------------------------------------
    # Test: Invalid Peer - Missing Public Key
    # -------------------------------------------------------------------------------------
    - given:
        db:
          state: *emptyState
        envelope:
          data:
            type: peer
            pubkey: ""  # Empty public key - invalid
          metadata: {}
      then:
        db:
          state: *emptyState  # No peer added
          
    # -------------------------------------------------------------------------------------
    # Test: Resolve Unknown Peer Messages
    # -------------------------------------------------------------------------------------
    - description: When peer event arrives, should remove unknown_peer flag from matching messages
      given:
        db:
          state:
            # Messages from unknown peers
            messages:
              - text: Hello from unknown
                sender: new_peer
                timestamp: 1000
                unknown_peer: true      # Marked as from unknown peer
                received_by: test_identity
              - text: Another message
                sender: other_peer
                timestamp: 2000
                unknown_peer: true
                received_by: test_identity
            peers: *emptyPeers
        envelope:
          data:
            type: peer
            pubkey: new_peer    # Now we know this peer
            name: New Peer
          metadata:
            received_by: test_identity
      then:
        db:
          state:
            messages:
              # First message no longer marked as unknown
              - text: Hello from unknown
                sender: new_peer
                timestamp: 1000
                received_by: test_identity
              # Second message still unknown (different sender)
              - text: Another message
                sender: other_peer
                timestamp: 2000
                unknown_peer: true
                received_by: test_identity
            peers:
              - pubkey: new_peer
                name: New Peer
                joined_via: direct
                added_at: "*"
                received_by: test_identity
                
    # -------------------------------------------------------------------------------------
    # Test: Identity-Specific Unknown Peer Resolution
    # -------------------------------------------------------------------------------------
    - description: Peer event should only remove unknown_peer flag for messages received by same identity
      given:
        db:
          state:
            messages:
              # Message for identity1
              - text: Message for identity1
                sender: new_peer
                timestamp: 1000
                unknown_peer: true
                received_by: identity1
              # Same sender, different recipient identity
              - text: Message for identity2
                sender: new_peer
                timestamp: 2000
                unknown_peer: true
                received_by: identity2
            peers: *emptyPeers
        envelope:
          data:
            type: peer
            pubkey: new_peer
            name: New Peer
          metadata:
            received_by: identity1  # Only identity1 knows this peer
      then:
        db:
          state:
            messages:
              # Resolved for identity1
              - text: Message for identity1
                sender: new_peer
                timestamp: 1000
                received_by: identity1
              # Still unknown for identity2
              - text: Message for identity2
                sender: new_peer
                timestamp: 2000
                unknown_peer: true
                received_by: identity2
            peers:
              - pubkey: new_peer
                name: New Peer
                joined_via: direct
                added_at: "*"
                received_by: identity1

# ===========================================================================================
# COMMANDS
# ===========================================================================================
commands:
  # -----------------------------------------------------------------------------------------
  # Create New Peer
  # -----------------------------------------------------------------------------------------
  create:
    description: Creates a new peer event
    func: create.execute
    tests:
      - given:
          db: {}
          params:
            publicKey: peer456  # Required
            name: Bob          # Optional
        then:
          return:
            api_response:
              return: Peer created
              peer:
                pubkey: peer456
                name: Bob
            newEvents:
              - type: peer
                pubkey: peer456
                name: Bob