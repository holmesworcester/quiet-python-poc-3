# ===========================================================================================
# Message Handler
# ===========================================================================================
# Purpose: Handles text messages in the network. This handler validates message signatures,
#          stores messages, and routes them through the simulated Tor network.
#
# Key Functions:
# - Validates messages have required fields (text, sender)
# - Stores messages with metadata
# - Marks messages from unknown peers
# - Routes self-generated messages to outgoing queue
# ===========================================================================================

# Common anchors for reused data
anchors:
  # Common empty states
  emptyMessages: &emptyMessages []
  emptyPeers: &emptyPeers []
  emptyOutgoing: &emptyOutgoing []
  
  # Common test environment
  cryptoDummy: &cryptoDummy
    CRYPTO_MODE: dummy

type: message

# ===========================================================================================
# PROJECTOR - HANDLES INCOMING MESSAGE EVENTS
# ===========================================================================================
projector:
  description: Validates sig using metadata, adds to state.messages if valid; if selfGenerated, encrypts and adds to outgoing.
  func: projector.project
  
  # =======================================================================================
  # TEST SCENARIOS
  # =======================================================================================
  tests:
    # -------------------------------------------------------------------------------------
    # Test: Self-Generated Message
    # -------------------------------------------------------------------------------------
    - given:
        db:
          state:
            messages: *emptyMessages
        envelope:
          data:
            type: message
            text: Hello
            sender: alice_pub
            sig: abc  # Signature (simplified in this protocol)
          metadata:
            selfGenerated: true      # Message created locally
            received_by: alice_pub   # Sender is also receiver for self-generated
      then:
        db:
          state:
            messages:
              - text: Hello
                sender: alice_pub
                timestamp: "*"       # System-generated timestamp
                received_by: alice_pub
                
    # -------------------------------------------------------------------------------------
    # Test: Received Message from Known Peer
    # -------------------------------------------------------------------------------------
    - given:
        db:
          state:
            peers:
              - pubkey: sender1
                name: Sender 1
                received_by: test_identity
            messages: *emptyMessages
            identities:
              - pubkey: test_identity
                privkey: test_privkey
                name: Test Identity
        envelope:
          data:
            type: message
            text: World
            sender: sender1
            sig: def
          metadata:
            eventId: event123
            received_by: test_identity
      then:
        db:
          eventStore:
            - type: message
              text: World
              sender: sender1
              sig: def
          state:
            messages:
              - text: World
                sender: sender1
                sig: def
                id: event123         # Event ID preserved
                received_by: test_identity
                
    # -------------------------------------------------------------------------------------
    # Test: Message from Unknown Sender
    # -------------------------------------------------------------------------------------
    - description: Message from unknown sender (no peers) should be stored with unknown_peer flag
      given:
        db:
          state:
            peers: *emptyPeers  # No known peers
            messages: *emptyMessages
        envelope:
          data:
            type: message
            text: Unknown
            sender: unknown_sender
          metadata: {}
      then:
        db:
          eventStore:
            - type: message
              text: Unknown
              sender: unknown_sender
          state:
            messages:
              - text: Unknown
                sender: unknown_sender
                timestamp: "*"
                unknown_peer: true   # Marked as from unknown peer
                
    # -------------------------------------------------------------------------------------
    # Test: Self-Generated Message Metadata
    # -------------------------------------------------------------------------------------
    - description: Self-generated message should be stored with received_by set to sender
      given:
        db:
          state:
            messages: *emptyMessages
        envelope:
          data:
            type: message
            text: Hello
            sender: peerA
            sig: abc
          metadata:
            selfGenerated: true
      then:
        db:
          state:
            messages:
              - text: Hello
                sender: peerA
                received_by: peerA   # Self-generated: sender = receiver
                timestamp: "*"
                
    # -------------------------------------------------------------------------------------
    # Test: Message from Known Sender
    # -------------------------------------------------------------------------------------
    - description: Message from known sender should be stored normally
      given:
        db:
          state:
            messages: *emptyMessages
            peers:
              - pubkey: peerA
                name: Peer A
                received_by: peerB
            identities:
              - pubkey: peerB
                privkey: peerB_priv
                name: Peer B
        envelope:
          data:
            type: message
            text: Hi
            sender: peerA
            sig: def
          metadata:
            received_by: peerB
      then:
        db:
          state:
            messages:
              - text: Hi
                sender: peerA
                timestamp: "*"
                received_by: peerB
                
    # -------------------------------------------------------------------------------------
    # Test: Invalid Message - No Text
    # -------------------------------------------------------------------------------------
    - description: Projector should ignore messages lacking text/content (with known sender)
      given:
        db:
          state:
            messages: *emptyMessages
            peers:
              - pubkey: peerA
                name: Peer A
                received_by: peerB
        envelope:
          data:
            type: message
            sender: peerA
            # Missing text field
          metadata:
            received_by: peerB
      then:
        db:
          state:
            messages: *emptyMessages  # Message rejected
            
    # -------------------------------------------------------------------------------------
    # Test: Non-Self-Generated Message Routing
    # -------------------------------------------------------------------------------------
    - description: Projector should not add to outgoing for non-self-generated messages (with known sender)
      given:
        db:
          state:
            messages: *emptyMessages
            outgoing: *emptyOutgoing
            peers:
              - pubkey: peerA
                name: Peer A
                received_by: peerB
            identities:
              - pubkey: peerB
                privkey: peerB_priv
                name: Peer B
        envelope:
          data:
            type: message
            text: External
            sender: peerA
            sig: xyz
          metadata:
            selfGenerated: false    # Not self-generated
            received_by: peerB
      then:
        db:
          state:
            messages:
              - text: External
                sender: peerA
                timestamp: "*"
                received_by: peerB
            outgoing: *emptyOutgoing  # Not added to outgoing queue
            
    # -------------------------------------------------------------------------------------
    # Test: Unknown Peer Detection
    # -------------------------------------------------------------------------------------
    - description: Message from unknown peer should be marked as unknown-peer
      given:
        db:
          state:
            messages: *emptyMessages
            peers: *emptyPeers
        envelope:
          data:
            type: message
            text: Hello from unknown
            sender: unknown_pub
            sig: xyz
          metadata: {}
      then:
        db:
          eventStore:
            - type: message
              text: Hello from unknown
              sender: unknown_pub
              sig: xyz
          state:
            messages:
              - text: Hello from unknown
                sender: unknown_pub
                sig: xyz
                timestamp: "*"
                unknown_peer: true  # Marked as unknown
            peers: *emptyPeers
            
    # -------------------------------------------------------------------------------------
    # Test: Known Peer Detection
    # -------------------------------------------------------------------------------------
    - description: Message from known peer should not be marked as unknown-peer
      given:
        db:
          state:
            messages: *emptyMessages
            peers:
              - pubkey: known_pub
                name: Known Peer
                received_by: test_identity
            identities:
              - pubkey: test_identity
                privkey: test_privkey
                name: Test Identity
        envelope:
          data:
            type: message
            text: Hello from known
            sender: known_pub
            sig: abc
          metadata:
            received_by: test_identity
      then:
        db:
          eventStore:
            - type: message
              text: Hello from known
              sender: known_pub
              sig: abc
          state:
            messages:
              - text: Hello from known
                sender: known_pub
                sig: abc
                timestamp: "*"
                received_by: test_identity
                # No unknown_peer flag
                
    # -------------------------------------------------------------------------------------
    # Test: Identity-Specific Peer Knowledge
    # -------------------------------------------------------------------------------------
    - description: Message should be marked as unknown_peer when sender is not known to the specific recipient
      given:
        db:
          state:
            messages: *emptyMessages
            peers:
              # peer1 is known to identity1 but not identity2
              - pubkey: peer1
                name: Peer 1
                received_by: identity1
              - pubkey: peer2
                name: Peer 2
                received_by: identity2
            identities:
              - pubkey: identity1
                privkey: priv1
                name: Identity 1
              - pubkey: identity2
                privkey: priv2
                name: Identity 2
        envelope:
          data:
            type: message
            text: Hello from peer1
            sender: peer1
            sig: xyz
          metadata:
            received_by: identity2  # identity2 doesn't know peer1
      then:
        db:
          eventStore:
            - type: message
              text: Hello from peer1
              sender: peer1
              sig: xyz
          state:
            messages:
              - text: Hello from peer1
                sender: peer1
                sig: xyz
                timestamp: "*"
                received_by: identity2
                unknown_peer: true  # Unknown to this identity

# ===========================================================================================
# COMMANDS
# ===========================================================================================
commands:
  # -----------------------------------------------------------------------------------------
  # Create and Broadcast Message
  # -----------------------------------------------------------------------------------------
  create:
    description: Creates canonical signed event and broadcasts to all known peers.
    func: create.execute
    tests:
      # -------------------------------------------------------------------------------------
      # Test: Message with No Peers
      # -------------------------------------------------------------------------------------
      - description: Message with no known peers
        given:
          db:
            state:
              peers: *emptyPeers  # No peers to send to
          params:
            text: Hello
          env: *cryptoDummy  # Simplified crypto for testing
        then:
          return:
            api_response:
              return: Message broadcast to 0 peers
              messageId: "*"
              sentTo: 0
            newEvents:
              - type: message
                text: Hello
                sig: "*"
                
      # -------------------------------------------------------------------------------------
      # Test: Broadcast to Multiple Peers
      # -------------------------------------------------------------------------------------
      - description: Message broadcast to all known peers
        given:
          db:
            state:
              identities:
                sender:
                  keypair:
                    public: dummy_pubkey_sender
                    private: dummy_privkey_sender
                  name: Sender
              peers:
                - pubkey: peer1
                  name: Peer 1
                  received_by: dummy_pubkey_sender
                - pubkey: peer2
                  name: Peer 2
                  received_by: dummy_pubkey_sender
                - pubkey: dummy_pubkey_sender
                  name: Self
                  received_by: dummy_pubkey_sender
          params:
            text: Hello peers
          identity: sender
          env: *cryptoDummy
        then:
          return:
            api_response:
              return: Message broadcast to 2 peers
              messageId: "*"
              sentTo: 2  # Excludes self
            newEvents:
              - type: message
                text: Hello peers
                sig: "*"
          db:
            state:
              outgoing:
                # Message queued for each peer (excluding self)
                - recipient: peer1
                  data:
                    type: message
                    text: Hello peers
                    sig: "*"
                - recipient: peer2
                  data:
                    type: message
                    text: Hello peers
                    sig: "*"
                    
      # -------------------------------------------------------------------------------------
      # Test: Message Delivery Through Ticks
      # -------------------------------------------------------------------------------------
      - description: Message broadcast to peers is delivered after ticks
        given:
          db:
            state:
              identities:
                alice:
                  keypair:
                    public: dummy_pubkey_alice
                    private: dummy_privkey_alice
                  name: Alice
              peers:
                - pubkey: bob_pub
                  name: Bob
                  received_by: dummy_pubkey_alice
                - pubkey: charlie_pub
                  name: Charlie
                  received_by: dummy_pubkey_alice
              messages: *emptyMessages
          params:
            text: Hello via ticks
            time_now_ms: 1000
          identity: alice
          env: *cryptoDummy
        ticks: 2  # Process through two tick cycles
        then:
          return:
            api_response:
              return: Message broadcast to 2 peers
              messageId: "*"
              sentTo: 2
          db:
            state:
              messages:
                - text: Hello via ticks
                  sender: "*"
              outgoing: *emptyOutgoing  # Queue cleared after delivery
              
  # -----------------------------------------------------------------------------------------
  # List Messages
  # -----------------------------------------------------------------------------------------
  list:
    description: Lists all messages for a given peer
    func: list.execute
    tests:
      # -------------------------------------------------------------------------------------
      # Test: Basic Message Listing
      # -------------------------------------------------------------------------------------
      - given:
          db:
            state:
              messages:
                - text: Hi
                  sender: peer1
                  recipient: peer2
                  timestamp: 100
                  received_by: peer1
                - text: Hello
                  sender: peer2
                  recipient: peer1
                  timestamp: 200
                  received_by: peer1
          params:
            peerId: peer1
        then:
          return:
            api_response:
              return: Found 2 messages
              messages:
                - text: Hi
                  sender: peer1
                  recipient: peer2
                  timestamp: 100
                - text: Hello
                  sender: peer2
                  recipient: peer1
                  timestamp: 200
                  
      # -------------------------------------------------------------------------------------
      # Test: Exclude Unknown Peer Messages
      # -------------------------------------------------------------------------------------
      - description: List should exclude messages marked as unknown_peer
        given:
          db:
            state:
              messages:
                - text: Hi
                  sender: peer1
                  recipient: peer2
                  timestamp: 100
                  received_by: peer1
                - text: Unknown message
                  sender: unknown1
                  recipient: peer1
                  timestamp: 150
                  unknown_peer: true  # Excluded from list
                  received_by: peer1
                - text: Hello
                  sender: peer2
                  recipient: peer1
                  timestamp: 200
                  received_by: peer1
          params:
            peerId: peer1
        then:
          return:
            api_response:
              return: Found 2 messages
              messages:
                # Unknown peer message excluded
                - text: Hi
                  sender: peer1
                  recipient: peer2
                  timestamp: 100
                - text: Hello
                  sender: peer2
                  recipient: peer1
                  timestamp: 200