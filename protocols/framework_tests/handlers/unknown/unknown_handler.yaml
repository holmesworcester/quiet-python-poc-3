# ============================================================================
# Unknown Event Handler Configuration
# ============================================================================
# Purpose: Manages events that were successfully decrypted but have
#          unrecognized event types. These events are stored for debugging
#          and future compatibility when new event types are added.
#
# Key Concepts:
# - Unknown events: Successfully decrypted but type not recognized
# - Event preservation: Keeps unknown events for future processing
# - Automatic purging: Prevents unbounded growth of unknown events
# - Debugging aid: Helps identify new event types in the network
# ============================================================================

# Common anchors for reused data
anchors:
  # Common empty states
  emptyState: &emptyState {}

type: unknown  # Handler type identifier

# ============================================================================
# Projector Configuration
# ============================================================================
# The projector stores unrecognized events in state.unknown_events
# preserving all data and metadata for future analysis
projector:
  description: Projects decrypted but unrecognized event types to state.unknown_events
  func: projector.project
  tests:
    # --------------------------------------------------------------------------
    # Test 1: First Unknown Event
    # --------------------------------------------------------------------------
    # Tests storing an unknown event type with full decryption metadata
    - given:
        db:
          state: *emptyState  # Empty initial state
        envelope:
          data:
            type: unrecognized_type  # Event type not in registry
            data: some data          # Event payload
          metadata:
            eventId: event123        # Unique event identifier
            outerKeyHash: key1       # Successfully used outer key
            innerKeyHash: key2       # Successfully used inner key
            origin: peer1            # Source peer
            receivedAt: 1000         # Timestamp
      then:
        db:
          state:
            unknown_events:
              # Unknown event stored with all metadata
              - data:
                  type: unrecognized_type
                  data: some data
                metadata:
                  eventId: event123
                  outerKeyHash: key1  # Tracks successful decryption
                  innerKeyHash: key2  # Both layers decrypted
                  origin: peer1
                  receivedAt: 1000
                timestamp: 1000       # When stored as unknown

    # --------------------------------------------------------------------------
    # Test 2: Multiple Unknown Events
    # --------------------------------------------------------------------------
    # Tests appending new unknown events to existing collection
    - given:
        db:
          state:
            unknown_events:
              # Existing unknown event
              - data:
                  type: old_type
                timestamp: 500
        envelope:
          data:
            type: another_unknown    # Different unknown type
            value: 42                # Different payload structure
          metadata:
            eventId: event456
            receivedAt: 2000
      then:
        db:
          state:
            unknown_events:
              # Original event preserved
              - data:
                  type: old_type
                timestamp: 500
              # New event appended
              - data:
                  type: another_unknown
                  value: 42
                metadata:
                  eventId: event456
                  receivedAt: 2000
                timestamp: 2000

# ============================================================================
# Commands
# ============================================================================
commands:
  # --------------------------------------------------------------------------
  # Purge Old Events Command
  # --------------------------------------------------------------------------
  # Removes old unknown events to prevent unbounded storage growth
  purge_old:
    description: Purge old unknown events to prevent unbounded growth
    func: purge_old.execute
    tests:
      # Test purging events older than cutoff
      - given:
          db:
            state:
              unknown_events:
                # Old event (will be purged)
                - data:
                    type: old_event
                  timestamp: 1000           # Very old timestamp
                # Recent event (will be kept)
                - data:
                    type: recent_event
                  timestamp: 90000000       # Recent timestamp
          params:
            current_time_ms: 100000000      # Current time for comparison
            cutoff_hours: 24                # Keep last 24 hours only
        then:
          return:
            return: Purged 1 events
            purged: 1                       # One old event removed
            remaining: 1                    # One recent event kept
      
      # Test with no unknown events
      - given:
          db:
            state: *emptyState  # No unknown events
          params:
            current_time_ms: 100000000
        then:
          return:
            return: No unknown events
            purged: 0                       # Nothing to purge

# ============================================================================
# Job Configuration
# ============================================================================
# Automatically runs purge_old command periodically to clean up old events
job: purge_old