# ============================================================================
# Incoming Handler Configuration
# ============================================================================
# Purpose: Central handler for processing incoming encrypted messages from the
#          network. Performs multi-layer decryption and routes decrypted events
#          to appropriate handlers based on event type.
#
# Key Features:
# - Two-layer decryption (outer and inner keys)
# - Automatic routing to type-specific handlers
# - Missing key management
# - Support for both dummy and real crypto modes
# - Unknown event type handling
# ============================================================================

# Common anchors for reused data
anchors:
  # Environment settings
  cryptoDummy: &cryptoDummy
    CRYPTO_MODE: dummy
  cryptoReal: &cryptoReal
    CRYPTO_MODE: real
    
  # Common empty states
  emptyMessages: &emptyMessages []
  emptyIncoming: &emptyIncoming []
  emptyKeyMap: &emptyKeyMap {}
  emptyPendingMissingKey: &emptyPendingMissingKey []
  emptyUnknownEvents: &emptyUnknownEvents []
  
  # Common test data
  alice: &alice alice
  
  # Common key hashes (64 chars)
  outerKeyHash1: &outerKeyHash1 outerKeyHash1234567890123456789012345678901234567890123456789012
  unknownKeyHash: &unknownKeyHash unknownKeyHash12345678901234567890123456789012345678901234567890
  validKeyHash: &validKeyHash validKeyHash1234567890123456789012345678901234567890123456789012345
  blake2bHash1: &blake2bHash1 3083e1ce982abd7f59235aa1ea3c97046562c75205d4dab8affd2f3600d79958
  blake2bHash2: &blake2bHash2 69c6718bad81422d4d230563e6926cffcfb5375991806b1ac1c5c3998bbed949
  
  # Common keys
  testKey1: &testKey1 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  testKey2: &testKey2 fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210

type: incoming            # Handler type identifier
version: 1                # Handler version
description: Processes incoming messages from network and routes to appropriate handlers

# ============================================================================
# Commands
# ============================================================================
commands:
  # --------------------------------------------------------------------------
  # Process Incoming Command
  # --------------------------------------------------------------------------
  # Main command that processes the incoming message queue
  process_incoming:
    description: Processes incoming message queue and routes to handlers
    func: process_incoming.execute
    tests:
      # ========================================================================
      # Dummy Crypto Mode Tests
      # ========================================================================
      
      # Test 1: Successful two-layer decryption and routing
      - description: Successfully decrypt two-layer envelope and route to handler (dummy)
        given:
          params:
            time_now_ms: 1000
          identity: null
          env: *cryptoDummy    # Use predictable mock crypto
          db:
            incoming:
              # Two-layer encrypted format: outerKeyHash (64 chars) + encrypted JSON
              - data: |
                  outerKeyHash1234567890123456789012345678901234567890123456789012{"innerHash":"innerKeyHash123","data":"{\"type\":\"message\",\"text\":\"Hello\",\"sender\":\"alice\"}"}
                origin: peer1
                received_at: 1000
            state:
              key_map:
                # Both decryption keys available
                *outerKeyHash1: outer_key
                innerKeyHash123: inner_key
              messages: *emptyMessages
              known_senders:
                - *alice           # Alice is a known sender
        then:
          return:
            db:
              incoming: *emptyIncoming        # Message processed and removed
              state:
                messages:
                  # Message successfully decrypted and projected
                  - text: Hello
                    sender: *alice

      # ========================================================================
      # Real Crypto Mode Tests
      # ========================================================================
      
      # Test 2: Generate and decrypt real encrypted blob
      - description: Generate encrypted blob and decrypt it (real crypto)
        comment: This test generates encrypted data using the actual encryption code, then decrypts it
        given:
          params:
            time_now_ms: 1000
          identity: null
          env: *cryptoReal     # Use real NaCl crypto
          db:
            incoming: *emptyIncoming
            state:
              key_map:
                # Blake2b hashes of the encryption keys
*blake2bHash1: *testKey1
                *blake2bHash2: *testKey2
              messages: *emptyMessages
              known_senders:
                - *alice
          setup:
            # Special setup to generate encrypted test data
            type: generate_encrypted_blob
            inner_data:
              type: message
              text: Hello
              sender: alice
            inner_key: *testKey2
            outer_key: *testKey1
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                messages:
                  - text: Hello
                    sender: *alice

      # ========================================================================
      # Missing Key Tests
      # ========================================================================
      
      # Test 3: Missing outer key (dummy mode)
      - description: Missing outer key creates missing_key event (dummy)
        given:
          params:
            time_now_ms: 2000
          identity: null
          env: *cryptoDummy
          db:
            incoming:
              # Unknown outer key hash
              - data: unknownKeyHash12345678901234567890123456789012345678901234567890encrypted_data
                origin: peer2
                received_at: 2000
            state:
              key_map: *emptyKeyMap         # No keys available
              pending_missing_key: *emptyPendingMissingKey
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                pending_missing_key:
                  # Entry created for missing key
                  - missingHash: *unknownKeyHash
                    inNetwork: false  # Not validated

      # Test 4: Missing outer key (real crypto)
      - description: Missing outer key creates missing_key event (real crypto)
        given:
          params:
            time_now_ms: 2000
          identity: null
          env: *cryptoReal
          db:
            incoming:
              # 64-char hex hash + encrypted data
              - data: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef123456789012345678901234567890123456789012345678some_encrypted_data_here
                origin: peer2
                received_at: 2000
            state:
              key_map: *emptyKeyMap
              pending_missing_key: *emptyPendingMissingKey
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                pending_missing_key:
                  - missingHash: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
                    inNetwork: false

      # Test 5: Missing inner key (dummy mode)
      - description: Missing inner key creates missing_key event (dummy)
        given:
          params:
            time_now_ms: 3000
          identity: null
          env: *cryptoDummy
          db:
            incoming:
              # Outer key available but inner key missing
              - data: |
                  outerKeyHash1234567890123456789012345678901234567890123456789012{"innerHash":"unknownInnerKey","data":"encrypted_inner"}
                origin: peer3
                received_at: 3000
            state:
              key_map:
                *outerKeyHash1: outer_key
              pending_missing_key: *emptyPendingMissingKey
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                pending_missing_key:
                  - missingHash: unknownInnerKey
                    inNetwork: true   # Passed outer validation

      # Test 6: Missing inner key (real crypto)
      - description: Missing inner key with real crypto creates missing_key event
        given:
          params:
            time_now_ms: 3000
          identity: null
          env: *cryptoReal
          db:
            incoming:
              # Real encrypted blob with missing inner key
              - data: 3083e1ce982abd7f59235aa1ea3c97046562c75205d4dab8affd2f3600d799584b03a9b86587faa371b508af3e785e8d337fc750b4053fd290937e3787cff740b60d1c4acc826cf115ed8f66fbbfbc7d01dd88c429ce4809c3d64c3d05524c6db7ba0d0666657b38ba60f5de06a241b1876fadf9b411c7850b6e98c29c6be7ca8e4492eddfda216d697f724cc6a4028cd5bd1832f77c513c24dd0df98d7b692f958492142d6549f8b0e109236c8618476c31467bdd0d21e985dfa148a71e945a5ba85b4253971753020bad64a852792ad2
                origin: peer3
                received_at: 3000
            state:
              key_map:
                # Only outer key available
                3083e1ce982abd7f59235aa1ea3c97046562c75205d4dab8affd2f3600d79958: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
              pending_missing_key: *emptyPendingMissingKey
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                pending_missing_key:
                  - missingHash: unknownInnerKeyHash1234567890123456789012345678901234567890123456
                    inNetwork: true

      # ========================================================================
      # Invalid Data Tests
      # ========================================================================
      
      # Test 7: Invalid JSON after decryption (dummy mode)
      - description: Invalid JSON after decrypt drops message (dummy)
        given:
          params:
            time_now_ms: 4000
          identity: null
          env: *cryptoDummy
          db:
            incoming:
              # Valid key but invalid JSON content
              - data: validKeyHash1234567890123456789012345678901234567890123456789012345not_json_data
                origin: peer4
                received_at: 4000
            state:
              key_map:
                *validKeyHash: valid_key
        then:
          return:
            db:
              incoming: *emptyIncoming        # Message dropped silently

      # Test 8: Invalid encrypted data (real crypto)
      - description: Invalid data with real crypto drops (no nonce)
        given:
          params:
            time_now_ms: 4000
          identity: null
          env: *cryptoReal
          db:
            incoming:
              # Invalid format - missing nonce
              - data: fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210not_valid_encrypted_data
                origin: peer4
                received_at: 4000
            state:
              key_map:
                fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
        then:
          return:
            db:
              incoming: *emptyIncoming

      # ========================================================================
      # Pre-decrypted Envelope Tests
      # ========================================================================
      
      # Test 9: Already decrypted envelope (dummy mode)
      - description: Already decrypted envelope passes through (dummy)
        given:
          params:
            time_now_ms: 5000
          identity: null
          env: *cryptoDummy
          db:
            incoming:
              # Envelope format indicates already decrypted
              - envelope: true
                data:
                  type: message
                  text: Already decrypted
                  sender: alice
                metadata:
                  selfGenerated: true
            state:
              messages: *emptyMessages
              known_senders:
                - *alice
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                messages:
                  - text: Already decrypted
                    sender: *alice

      # Test 10: Already decrypted envelope (real crypto)
      - description: Already decrypted envelope passes through (real crypto)
        given:
          params:
            time_now_ms: 5000
          identity: null
          env: *cryptoReal
          db:
            incoming:
              - envelope: true
                data:
                  type: message
                  text: Already decrypted
                  sender: alice
                metadata:
                  selfGenerated: true
            state:
              messages: *emptyMessages
              known_senders:
                - *alice
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                messages:
                  - text: Already decrypted
                    sender: *alice

      # ========================================================================
      # Unknown Event Type Tests
      # ========================================================================
      
      # Test 11: Unknown event type handling
      - description: Two-layer decryption with unknown event type goes to unknown handler (real crypto)
        given:
          params:
            time_now_ms: 6000
          identity: null
          env: *cryptoReal
          db:
            incoming: *emptyIncoming
            state:
              key_map:
*blake2bHash1: *testKey1
                *blake2bHash2: *testKey2
              unknown_events: *emptyUnknownEvents
          setup:
            type: generate_encrypted_blob
            inner_data:
              type: custom_event_type    # Unrecognized event type
              payload: test data
              sender: alice
            inner_key: *testKey2
            outer_key: *testKey1
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                unknown_events:
                  # Event stored as unknown
                  - data:
                      type: custom_event_type
                      payload: test data
                      sender: *alice
                    metadata: '...'
                    timestamp: 6000

      # Test 12: Missing inner key with proper hash calculation
      - description: Missing inner key creates missing_key event with proper hash (real crypto)
        given:
          params:
            time_now_ms: 7000
          identity: null
          env: *cryptoReal
          db:
            incoming: *emptyIncoming
            state:
              key_map:
                3083e1ce982abd7f59235aa1ea3c97046562c75205d4dab8affd2f3600d79958: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
              pending_missing_key: *emptyPendingMissingKey
          setup:
            type: generate_encrypted_blob
            inner_data:
              type: message
              text: Missing inner key test
              sender: bob
            # Different inner key that's not in key_map
            inner_key: '1111111111111111111111111111111111111111111111111111111111111111'
            outer_key: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
        then:
          return:
            db:
              incoming: *emptyIncoming
              state:
                pending_missing_key:
                  # Hash of the missing inner key
                  - missingHash: 5cdbdb8963a47c9e1c0058adb1db2a5748248a240be05fc2e006f2550bd462be
                    inNetwork: true

# ============================================================================
# Job Configuration
# ============================================================================
# Automatically runs process_incoming command periodically
job: process_incoming