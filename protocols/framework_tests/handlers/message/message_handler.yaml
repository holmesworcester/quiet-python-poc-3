# ============================================================================
# Message Handler Configuration
# ============================================================================
# Purpose: Handles text messages in the system, including creation, validation,
#          projection to state, and optional encryption support.
#
# Key Features:
# - Message creation with text content
# - Sender validation against known_senders list
# - Reply threading support
# - Optional message encryption
# - Event store persistence
# ============================================================================

# Common anchors for reused data
anchors:
  # Common empty states
  emptyEventStore: &emptyEventStore []
  emptyMessages: &emptyMessages []
  emptyKnownSenders: &emptyKnownSenders []
  emptyDb: &emptyDb {}

# ============================================================================
# Message Schema Definition
# ============================================================================
# Defines the structure and validation rules for message events
schema:
  $schema: http://json-schema.org/draft-07/schema#
  type: object
  required:
    - type                    # Must always be "message"
  properties:
    type:
      type: string
      const: message          # Event type identifier
    text:
      type: string            # Message text content
    content:
      type: string            # Alternative content field
    sender:
      type: string            # Sender's public key
    replyTo:
      type: string            # ID of message being replied to
    timestamp:
      type: string
      format: date-time       # ISO 8601 timestamp

# ============================================================================
# Projector Configuration
# ============================================================================
# Projects message events to application state based on validation rules
projector:
  tests:
    # --------------------------------------------------------------------------
    # Test 1: Valid Sender Message
    # --------------------------------------------------------------------------
    # Messages from known senders are stored and projected to state
    - description: Valid sender's message is projected to state
      given:
        db:
          eventStore: *emptyEventStore  # Empty event store
          state:
            known_senders:
              - pubkey1       # Pre-registered valid sender
        newEvent:
          type: message
          sender: pubkey1
          text: Hello
      then:
        db:
          eventStore:
            # Event stored in event store
            - type: message
              text: Hello
              sender: pubkey1
          state:
            messages:
              # Message projected to state.messages
              - text: Hello
                '*': '*'      # Wildcard for dynamic fields

    # --------------------------------------------------------------------------
    # Test 2: Unknown Sender Message
    # --------------------------------------------------------------------------
    # Messages from unknown senders are stored but NOT projected
    - description: Unknown sender's message is stored but not projected
      given:
        db:
          state:
            known_senders: *emptyKnownSenders  # No known senders
        newEvent:
          type: message
          sender: unknown     # Not in known_senders list
          text: Invalid
      then:
        db:
          eventStore:
            # Event still stored for record keeping
            - type: message
              text: Invalid
              sender: unknown
          state:
            messages: *emptyMessages  # NOT projected to state

# ============================================================================
# Commands
# ============================================================================
commands:
  # --------------------------------------------------------------------------
  # Create Message Command
  # --------------------------------------------------------------------------
  # Creates a new message event with optional reply threading and encryption
  create:
    # Input validation schema
    input:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      required:
        - text                # Message text is required
      properties:
        text:
          type: string
          minLength: 1        # Cannot be empty
        replyTo:
          type: string
          pattern: ^msg-[0-9]+$  # Message ID format validation
        encrypt:
          type: boolean
          default: false      # Encryption disabled by default
      additionalProperties: false

    # Output validation schema
    output:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      required:
        - return
        - new_events
        - newlyCreatedEvents
      properties:
        return:
          type: string
          const: Created      # Fixed return message
        new_events:
          type: array
          minItems: 1         # At least one event created
          items:
            type: object
            required:
              - type
              - text
            properties:
              type:
                const: message
              text:
                type: string
        newlyCreatedEvents:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - envelope
              - data
            properties:
              envelope:
                type: string
                enum:
                  - plaintext # Unencrypted message
                  - encrypted # Encrypted message
              data:
                type: object  # Message event data
              metadata:
                type: object  # Additional metadata
        messageId:
          type: string
          pattern: ^msg-[0-9.]+$  # Generated message ID
      additionalProperties: false

    # Test cases
    tests:
      # Basic message creation test
      - description: Create command returns new message event
        given:
          db: *emptyDb  # Empty database
          params:
            text: Hello       # Message content
        then:
          return:
            return: Created
            new_events:
              - type: message
                text: Hello
                sender: '*'   # Wildcard - sender auto-assigned