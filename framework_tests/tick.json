{
  "description": "Tests for tick: drains incoming envelopes, adapts to verifiedPlaintext, projects, runs jobs. Includes multi-adapter paths and event permutations for idempotence.",
  "tests": [
    {
      "given": {
        "db": {
          "incoming": [
            {"envelope": "incoming", "data": {"type": "message", "text": "Hello", "sender": "pubkey1"}, "metadata": {"network_id": "net1"}}
          ],
          "eventStore": {},
          "state": {"messages": [], "known_senders": ["pubkey1"]}
        }
      },
      "then": {
        "db": {
          "incoming": [],
          "eventStore": {"pubkey1": [{"type": "message", "text": "Hello", "*": "*"}]},
          "state": {"messages": [{"text": "Hello", "*": "*"}]}
        },
        "description": "Processes incoming via adapter path (incoming -> plaintext -> verifiedPlaintext), projects if valid."
      }
    },
    {
      "given": {
        "db": {
          "incoming": [
            {"envelope": "incoming", "data": {"type": "invalid"}, "metadata": {}}
          ]
        }
      },
      "then": {
        "db": {
          "blocked": [{"envelope": "...", "error": "Validation failed: unknown type"}]
        },
        "description": "Blocks invalid envelope after failed adaptation/projection."
      }
    },
    {
      "given": {
        "db": {
          "eventStore": {"pubkey1": []},
          "events_to_permute": [{"type": "message1"}, {"type": "message2"}]
        },
        "permute": true,
        "description": "Permutes events, ensures same final state regardless of order."
      },
      "then": {
        "db": {
          "eventStore": {"pubkey1": [{"type": "message1"}, {"type": "message2"}]},
          "state": {"messages": [{"type": "message1"}, {"type": "message2"}]}
        }
      }
    },
    {
      "given": {
        "db": {
          "incoming": [
            {
              "envelope": "incoming",
              "data": "dummy_encrypted_{\"data\": {\"type\": \"message\", \"content\": \"Encrypted message\"}, \"envelope\": \"signed\", \"metadata\": {\"sender\": \"alice\", \"signature\": \"dummy_sig_alice_encrypted\"}}",
              "metadata": {
                "encrypted": true,
                "algorithm": "dummy",
                "nonce": "dummy_nonce"
              }
            }
          ],
          "eventStore": {},
          "state": {"messages": [], "known_senders": ["alice"]}
        }
      },
      "then": {
        "db": {
          "incoming": [],
          "eventStore": {"*": [{"type": "message", "content": "Encrypted message"}]},
          "state": {"messages": [{"content": "Encrypted message"}]}
        }
      },
      "description": "End-to-end encrypted message flow: incoming -> encrypted -> signed -> verifiedPlaintext"
    },
    {
      "given": {
        "db": {
          "outgoing": [],
          "commands": [
            {
              "handler": "message",
              "command": "create",
              "input": {"text": "Encrypted message", "encrypt": true}
            }
          ]
        }
      },
      "then": {
        "db": {
          "outgoing": [
            {
              "envelope": "outgoing",
              "data": "*",
              "metadata": {
                "encrypted": true,
                "algorithm": "*",
                "nonce": "*",
                "timestamp": "*"
              }
            }
          ]
        }
      },
      "description": "Command creates encrypted message: plaintext -> signed -> encrypted -> outgoing"
    },
    {
      "given": {
        "db": {
          "incoming": [
            {
              "envelope": "incoming",
              "data": {"type": "message", "content": "Signed but not encrypted"},
              "metadata": {
                "sender": "alice",
                "signature": "dummy_sig_alice_123"
              }
            }
          ],
          "state": {"messages": [], "known_senders": ["alice"]}
        }
      },
      "then": {
        "db": {
          "incoming": [],
          "eventStore": {"*": [{"type": "message", "content": "Signed but not encrypted"}]},
          "state": {"messages": [{"*": "*"}]}
        }
      },
      "description": "Processes signed non-encrypted message: incoming -> signed -> verifiedPlaintext"
    },
    {
      "given": {
        "env": {"CRYPTO_MODE": "real"},
        "db": {
          "incoming": [
            {
              "envelope": "incoming",
              "data": "8a9b7c6d5e4f3a2b1c0d9e8f7a6b5c4d3e2f1a0b9c8d7e6f5a4b3c2d1e0f",
              "metadata": {
                "encrypted": true,
                "algorithm": "nacl_secretbox",
                "nonce": "1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f"
              }
            }
          ],
          "state": {"messages": []}
        }
      },
      "then": {
        "db": {
          "incoming": [],
          "blocked": [{"envelope": "*", "error": "*"}]
        }
      },
      "description": "Real encrypted message is processed through adapters: incoming -> encrypted -> signed -> verifiedPlaintext"
    },
    {
      "given": {
        "env": {"CRYPTO_MODE": "real"},
        "db": {
          "incoming": [
            {
              "envelope": "incoming",
              "data": {"type": "message", "text": "Signed with real crypto"},
              "metadata": {
                "sender": "2c9c893284ae94b2e0f7a932a03acddecfb34fcf256daac478b72640295fb4eb",
                "signature": "686f3db39085962563f88c86ece39cee2050a1ba14dcb4ccdc2756711cc49de4f92489a815b1f2f79af8c96e7ff650c69cbeb3e303fb25a1865e19f635eb0a0f"
              }
            }
          ],
          "state": {"messages": [], "known_senders": ["2c9c893284ae94b2e0f7a932a03acddecfb34fcf256daac478b72640295fb4eb"]}
        }
      },
      "then": {
        "db": {
          "incoming": [],
          "eventStore": {"2c9c893284ae94b2e0f7a932a03acddecfb34fcf256daac478b72640295fb4eb": [{"type": "message", "text": "Signed with real crypto", "*": "*"}]},
          "state": {"messages": [{"*": "*"}]}
        }
      },
      "description": "Processes real crypto signed message: incoming -> signed -> verifiedPlaintext"
    }
  ]
}